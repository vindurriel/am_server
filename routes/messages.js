// Generated by CoffeeScript 1.4.0
var Db, db, dbName, low_key, parse_date,
  _this = this;

Db = require('../db');

db = Db.db;

dbName = "am-db";

low_key = function(obj) {
  var k, res, v;
  res = {};
  for (k in obj) {
    v = obj[k];
    res[k.toLowerCase()] = v;
  }
  return res;
};

parse_date = function(input) {
  var day, h, m, month, parts, s, x, year, _ref;
  parts = input.match(/(\d+)/g);
  _ref = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = parts.length; _i < _len; _i++) {
      x = parts[_i];
      _results.push(x);
    }
    return _results;
  })(), year = _ref[0], month = _ref[1], day = _ref[2], h = _ref[3], m = _ref[4], s = _ref[5];
  return new Date(year, month - 1, day, h, m, s, 0);
};

module.exports.list = function(req, res) {
  var after, before, lim, options, query, tags, username, x, _ref;
  username = req.query.user;
  tags = req.query.tags;
  query = {};
  options = {};
  lim = 100;
  if (req.query.limit != null) {
    lim = req.query.limit;
    lim = parseInt(lim);
    if (lim > 100) {
      lim = 100;
    }
  }
  if (username != null) {
    query.user = username;
  }
  if (tags != null) {
    tags = (function() {
      var _i, _len, _ref, _results;
      _ref = tags.split(',');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        _results.push(x);
      }
      return _results;
    })();
    query.tags = {
      $in: tags
    };
  }
  if ((req.query.before != null) || (req.query.after != null)) {
    _ref = [req.query.before, req.query.after], before = _ref[0], after = _ref[1];
    query.created_on = {};
    if (before != null) {
      query.created_on.$lte = parse_date(before);
    }
    if (after != null) {
      query.created_on.$gte = parse_date(after);
    }
  }
  console.log(req.query);
  return db.collection(dbName, {
    w: 1
  }, function(err, collection) {
    return collection.find(query).limit(lim).toArray(function(err, r) {
      var items;
      if (err) {
        return res.send({
          "result": "error",
          'error_msg': "invalid data"
        });
      } else {
        items = r;
        return res.send({
          "result": "ok",
          'messages': items
        });
      }
    });
  });
};

module.exports["new"] = function(req, res) {
  var messages, token, user;
  console.log("new message");
  req.body = low_key(req.body);
  console.log(req.body);
  token = req.body.token;
  messages = req.body.messages;
  user = req.body.user;
  return db.collection(dbName, function(err, collection) {
    var data, message, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = messages.length; _i < _len; _i++) {
      message = messages[_i];
      data = low_key(message);
      data.created_on = new Date();
      data.user = user;
      console.log(data);
      _results.push(collection.insert(data, {
        safe: true
      }, function(err, r) {
        if (err) {
          return res.send({
            "result": "error",
            'error_msg': "invalid data"
          });
        } else {
          return res.send({
            "result": "ok"
          });
        }
      }));
    }
    return _results;
  });
};

module.exports["delete"] = function(req, res) {
  var data;
  data = req.params;
  console.log(data);
  return db.collection(dbName, function(err, collection) {
    return collection.remove(function(err, r) {
      if (err) {
        return res.send({
          "result": "error",
          'error_msg': "invalid data"
        });
      } else {
        return res.send({
          "result": "ok"
        });
      }
    });
  });
};

module.exports.put = function(req, res) {
  var data;
  data = req.params;
  console.log(data);
  return res.send("ok");
};

module.exports.get = function(req, res) {
  var data;
  data = req.params.id;
  console.log(data);
  return db.collection(dbName, function(err, collection) {
    return collection.findOne({
      'User': data
    }, function(err, r) {
      if (err) {
        return res.send({
          "result": "error",
          'error_msg': "invalid data"
        });
      } else {
        console.log(r);
        return res.send({
          "result": "ok",
          'data': r
        });
      }
    });
  });
};
